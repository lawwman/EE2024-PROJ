#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_ssp.h"

#include "temp.h"
#include "oled.h"

volatile uint32_t msTicks;
int tempFlag = 0;


static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

void SysTick_Handler(void) {
	msTicks++;
}

uint32_t getTicks(void){
	return msTicks;
}

// EINT3 Interrupt Handler
void EINT3_IRQHandler(void)
{
	// Determine whether GPIO Interrupt P0.2 has occurred
	if ((LPC_GPIOINT->IO0IntStatF>>2)& 0x1)
	{
        tempFlag = 1;
        LPC_GPIOINT->IO0IntClr = 1<<2;
	}
}

int main (void) {
	init_ssp();
    oled_init();

	SysTick_Config(SystemCoreClock/1000);
	temp_init(getTicks);

    NVIC_ClearPendingIRQ(EINT3_IRQn);
    LPC_GPIOINT->IO0IntEnF |= 1<<2; // Enable GPIO Interrupt P0.2
    NVIC_EnableIRQ(EINT3_IRQn);


    char temp_char[40];
    oled_clearScreen(OLED_COLOR_BLACK);

    while (1)
    {
    	if (tempFlag == 1) {
    		tempFlag = 0;
    		int32_t numtest = 123;
    		sprintf(temp_char, "%f", numtest/1.0);
        	oled_putString(0, 0, temp_char, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
    	}

    }
}

