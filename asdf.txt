/*****************************************************************************
 *   A demo example using several of the peripherals on the base board
 *
 *   Copyright(C) 2011, EE2024
 *   All rights reserved.
 *
 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include "lpc17xx_pinsel.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_uart.h"
#include "lpc17xx_gpio.h"

#include "temp.h"
#include "oled.h"
#include "acc.h"
#include "led7seg.h"
#include "rgb.h"
#include "light.h"
#include "pca9532.h"
static char msg[] = "Welcome to EE2024 \r\n";
volatile uint32_t msTicks;

//for timer 1 interrupt
#define SBIT_TIMER1  2
#define SBIT_MR0I    0
#define SBIT_MR0R    1
#define SBIT_CNTEN   0

void SysTick_Handler(void) { msTicks++; }

uint32_t getTicks(void){ return msTicks; }

// EINT3 Interrupt Handler
void EINT3_IRQHandler(void)
{
	// Determine whether GPIO Interrupt P2.10 has occurred
	// SW3 interrupt
	if ((LPC_GPIOINT->IO2IntStatF>>10)& 0x1)
	{
        LPC_GPIOINT->IO2IntClr = 1<<10;
	}

	// Determine whether GPIO Interrupt P0.2 has occurred
	// Temp sensor interrupt
	if ((LPC_GPIOINT->IO0IntStatF>>2)& 0x1)
	{
        LPC_GPIOINT->IO0IntClr = 1<<2;
	}

	// Determine whether GPIO Interrupt P2.5 has occurred
	// Light sensor interrupt
	if ((LPC_GPIOINT->IO2IntStatF>>5) & 0x1)
	{
        light_clearIrqStatus();
        LPC_GPIOINT ->IO2IntClr = 1<<5;
	}

}

void UART3_IRQHandler(void)
{
	UART3_StdIntHandler();
}

void pinsel_uart3(void){
    PINSEL_CFG_Type PinCfg;
    PinCfg.Funcnum = 2;
    PinCfg.Pinnum = 0;
    PinCfg.Portnum = 0;
    PINSEL_ConfigPin(&PinCfg);
    PinCfg.Pinnum = 1;
    PINSEL_ConfigPin(&PinCfg);
}

unsigned int getPrescalarForUs(uint8_t timerPclkBit)
{
    unsigned int pclk,prescalarForUs;
    pclk = (LPC_SC->PCLKSEL0 >> timerPclkBit) & 0x03;  /* get the pclk info for required timer */

    switch ( pclk )                                    /* Decode the bits to determine the pclk*/
    {
    case 0x00:
        pclk = SystemCoreClock/4;
        break;

    case 0x01:
        pclk = SystemCoreClock;
        break;

    case 0x02:
        pclk = SystemCoreClock/2;
        break;

    case 0x03:
        pclk = SystemCoreClock/8;
        break;

    default:
        pclk = SystemCoreClock/4;
        break;
    }

    prescalarForUs =pclk/1000000 - 1;                    /* Prescalar for 1us (1000000Counts/sec) */

    return prescalarForUs;
}

void init_uart(void){
    UART_CFG_Type uartCfg;
    uartCfg.Baud_rate = 115200;
    uartCfg.Databits = UART_DATABIT_8;
    uartCfg.Parity = UART_PARITY_NONE;
    uartCfg.Stopbits = UART_STOPBIT_1;
    //pin select for uart3;
    pinsel_uart3();
    //supply power & setup working parameters for uart3
    UART_Init(LPC_UART3, &uartCfg);
    //enable transmit for uart3
    UART_TxCmd(LPC_UART3, ENABLE);

    // UART FIFO config
    UART_FIFO_CFG_Type UARTFIFOConfigStruct;

    UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);
    // Init FIFO for UART3
    UART_FIFOConfig(LPC_UART3, &UARTFIFOConfigStruct);

    /* Enable UART Rx interrupt */
    UART_IntConfig(LPC_UART3, UART_INTCFG_RBR, ENABLE);

    /* Enable Interrupt for UART3 */
    NVIC_EnableIRQ(UART3_IRQn);
}

static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

static void init_i2c(void)
{
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}


static void init_GPIO(void)
{
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 1;
	PinCfg.Pinnum = 31;
	PINSEL_ConfigPin(&PinCfg); //for SW4
    GPIO_SetDir(1, 1<<31, 0);  //for SW4 to set as input

	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 5;
	PINSEL_ConfigPin(&PinCfg); //for P2.5
	GPIO_SetDir(2, 1<<5, 0);   //for P2.5 to set as interrupt input

}

static void setup(void) {
	init_ssp();
	init_i2c();
	init_GPIO();

	SysTick_Config(SystemCoreClock/1000);

	light_init();
	light_enable();
	pca9532_init();
    oled_init();
    acc_init();
    rgb_init();
    led7seg_init();

    SystemInit();

    LPC_SC->PCONP |= (1<<SBIT_TIMER1);

    LPC_TIM1->MCR  = (1<<SBIT_MR0I) | (1<<SBIT_MR0R);/* Clear TC on MR0 match and Generate Interrupt*/
    LPC_TIM1->PR   = getPrescalarForUs(4);;          /* Prescalar for 1ms */
    LPC_TIM1->MR0  = 333 * 1000;                     /* Load timer value to generate 100ms delay*/
    LPC_TIM1->TCR  = (1 <<SBIT_CNTEN);               /* Start timer by setting the Counter Enable*/
    NVIC_EnableIRQ(TIMER1_IRQn);

    init_uart();

    LPC_GPIOINT->IO2IntEnF |= 1<<10; //Enable GPIO Interrupt P2.10 - sw3 int
    LPC_GPIOINT->IO0IntEnF |= 1<<2;  //Enable GPIO Interrupt P0.2 - temp sensor int
	LPC_GPIOINT->IO2IntEnF |= 1<<5;  //Enable GPIO Interrupt P2.5 - Light sensor int
	light_setRange(LIGHT_RANGE_4000);
	light_setHiThreshold(3000);
	light_clearIrqStatus();
    NVIC_ClearPendingIRQ(EINT3_IRQn);
    NVIC_EnableIRQ(EINT3_IRQn);

}

int main (void){
	setup();
    //test sending message
    UART_Send(LPC_UART3, (uint8_t *)msg , strlen(msg), BLOCKING);
    while (1);
    return 0;
}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* Infinite loop */
	while(1);
}

